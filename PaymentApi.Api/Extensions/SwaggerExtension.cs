using Microsoft.Extensions.DependencyInjection;
using Microsoft.OpenApi.Models;
using System;
using System.IO;
using System.Reflection;
using System.Runtime.CompilerServices;

namespace PaymentApi.Api.Extensions
{
	public static class SwaggerExtension
	{
		public static void AddSwagger(this IServiceCollection services)
		{
			var contact = new OpenApiContact()
			{
				Name = "Walter Tudorin",
				Email = "wtudorin@gmail.com",
				Url = new Uri("http://www.tudorin.net")
			};

			var license = new OpenApiLicense()
			{
				Name = "Open License",
				Url = new Uri("http://www.tudorin.net")
			};

			var info = new OpenApiInfo()
			{
				Version = "v1",
				Title = "Swagger Demo Payment API",
				Description = "Swagger Demo Payment API",
				TermsOfService = new Uri("http://www.tudorin.net"),
				Contact = contact,
				License = license
			};

			services.AddSwaggerGen(c =>
			{
				c.SwaggerDoc("v1", info);

				//Locate the XML file being generated by ASP.NET...
				var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.XML";
				var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);

				//... and tell Swagger to use those XML comments.
				c.IncludeXmlComments(xmlPath);

				// JWT Token
				c.AddSecurityDefinition("Bearer", new OpenApiSecurityScheme
				{
					Name = "Authorization",
					Type = SecuritySchemeType.ApiKey,
					Scheme = "Bearer",
					BearerFormat = "JWT",
					In = ParameterLocation.Header,
					Description = "JWT Authorization header using the Bearer scheme."
				});

				c.AddSecurityRequirement(new OpenApiSecurityRequirement
				{
					{
						  new OpenApiSecurityScheme
							{
								Reference = new OpenApiReference
								{
									Type = ReferenceType.SecurityScheme,
									Id = "Bearer"
								}
							},
							new string[] {}
					}
				});
			});
		}
	}
}